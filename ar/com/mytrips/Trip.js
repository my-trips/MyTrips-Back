var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":89,"id":309,"methods":[{"el":13,"sc":5,"sl":13},{"el":18,"sc":5,"sl":18},{"el":24,"sc":5,"sl":20},{"el":29,"sc":5,"sl":26},{"el":30,"sc":5,"sl":30},{"el":44,"sc":5,"sl":33},{"el":48,"sc":5,"sl":46},{"el":52,"sc":5,"sl":50},{"el":56,"sc":5,"sl":54},{"el":60,"sc":5,"sl":58},{"el":65,"sc":5,"sl":62},{"el":71,"sc":5,"sl":67},{"el":76,"sc":5,"sl":73},{"el":80,"sc":5,"sl":78},{"el":83,"sc":5,"sl":81},{"el":88,"sc":5,"sl":85}],"name":"Trip","sl":10}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":58},{"sl":62},{"sl":85}],"name":"when delete an itinerary for a day, but the itinerary is valid, should be able to delete it","pass":true,"statements":[{"sl":59},{"sl":63},{"sl":64},{"sl":86},{"sl":87}]},"test_1":{"methods":[{"sl":62},{"sl":73},{"sl":85}],"name":"hen a trip is subtract a day to one of its destinations, it should return the updated destination","pass":true,"statements":[{"sl":63},{"sl":64},{"sl":74},{"sl":75},{"sl":86},{"sl":87}]},"test_10":{"methods":[{"sl":58},{"sl":62},{"sl":78},{"sl":81},{"sl":85}],"name":"when fetch a trip for id, if the trip exists it should return it","pass":true,"statements":[{"sl":59},{"sl":63},{"sl":64},{"sl":79},{"sl":82},{"sl":86},{"sl":87}]},"test_11":{"methods":[{"sl":58},{"sl":62}],"name":"when create a trip, it should return a complete trip","pass":true,"statements":[{"sl":59},{"sl":63},{"sl":64}]},"test_12":{"methods":[{"sl":58},{"sl":62}],"name":"when delete a trip from a user, you should be able to delete it","pass":true,"statements":[{"sl":59},{"sl":63},{"sl":64}]},"test_13":{"methods":[{"sl":13},{"sl":58},{"sl":62},{"sl":78},{"sl":81},{"sl":85}],"name":"when search for all trips for a user, it should return all of them","pass":true,"statements":[{"sl":59},{"sl":63},{"sl":64},{"sl":79},{"sl":82},{"sl":86},{"sl":87}]},"test_15":{"methods":[{"sl":13},{"sl":33},{"sl":58},{"sl":62}],"name":"when a trip is asked for the first destination, it should return it.","pass":true,"statements":[{"sl":34},{"sl":35},{"sl":36},{"sl":37},{"sl":38},{"sl":40},{"sl":43},{"sl":59},{"sl":63},{"sl":64}]},"test_17":{"methods":[{"sl":13},{"sl":33},{"sl":54}],"name":"when a trip is asked for the end date, it should return it.","pass":true,"statements":[{"sl":34},{"sl":35},{"sl":36},{"sl":37},{"sl":38},{"sl":40},{"sl":43},{"sl":55}]},"test_18":{"methods":[{"sl":13},{"sl":33},{"sl":62}],"name":"when a trip is asked for the destinations without origin, it should return it.","pass":true,"statements":[{"sl":34},{"sl":35},{"sl":36},{"sl":37},{"sl":38},{"sl":40},{"sl":43},{"sl":63},{"sl":64}]},"test_19":{"methods":[{"sl":85}],"name":"when update the arrival and departure dates of a transport between two destinations of a trip, it should return an updated transport","pass":true,"statements":[{"sl":86},{"sl":87}]},"test_2":{"methods":[{"sl":58},{"sl":62},{"sl":85}],"name":"when update an itinerary for a day, it should return an updated itinerary","pass":true,"statements":[{"sl":59},{"sl":63},{"sl":64},{"sl":86},{"sl":87}]},"test_20":{"methods":[{"sl":13},{"sl":33},{"sl":58},{"sl":62},{"sl":67}],"name":"when a trip is asked for the total cost, it should return it.","pass":true,"statements":[{"sl":34},{"sl":35},{"sl":36},{"sl":37},{"sl":38},{"sl":40},{"sl":43},{"sl":59},{"sl":63},{"sl":64},{"sl":68},{"sl":69},{"sl":70}]},"test_21":{"methods":[{"sl":13},{"sl":33},{"sl":50}],"name":"when a trip is asked for the start date, it should return it.","pass":true,"statements":[{"sl":34},{"sl":35},{"sl":36},{"sl":37},{"sl":38},{"sl":40},{"sl":43},{"sl":51}]},"test_24":{"methods":[{"sl":13},{"sl":33},{"sl":46},{"sl":50},{"sl":54}],"name":"when total days of a trip is requested, it should return the number of days.","pass":true,"statements":[{"sl":34},{"sl":35},{"sl":36},{"sl":37},{"sl":38},{"sl":40},{"sl":43},{"sl":47},{"sl":51},{"sl":55}]},"test_3":{"methods":[{"sl":13},{"sl":33},{"sl":58},{"sl":62},{"sl":73}],"name":"when ask a trip if a destination is not the last, and it is not, it should return true.","pass":true,"statements":[{"sl":34},{"sl":35},{"sl":36},{"sl":37},{"sl":38},{"sl":40},{"sl":43},{"sl":59},{"sl":63},{"sl":64},{"sl":74},{"sl":75}]},"test_4":{"methods":[{"sl":62},{"sl":73},{"sl":85}],"name":"when a trip is added a day to one of its destinations, it should return the updated destination","pass":true,"statements":[{"sl":63},{"sl":64},{"sl":74},{"sl":75},{"sl":86},{"sl":87}]},"test_5":{"methods":[{"sl":13},{"sl":33},{"sl":58},{"sl":62}],"name":"when destinations are added to a trip, it must return the updated trip.","pass":true,"statements":[{"sl":34},{"sl":35},{"sl":36},{"sl":37},{"sl":38},{"sl":40},{"sl":43},{"sl":59},{"sl":63},{"sl":64}]},"test_7":{"methods":[{"sl":58},{"sl":62},{"sl":85}],"name":"when create an itinerary for a day, it should return the full itinerary.","pass":true,"statements":[{"sl":59},{"sl":63},{"sl":64},{"sl":86},{"sl":87}]},"test_8":{"methods":[{"sl":58},{"sl":62}],"name":"when delete an itinerary for a day, but the itinerary is invalid, it should throw an exception","pass":true,"statements":[{"sl":59},{"sl":63},{"sl":64}]},"test_9":{"methods":[{"sl":85}],"name":"when update the type of transport between two destinations of a trip, it should return an updated transport","pass":true,"statements":[{"sl":86},{"sl":87}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [3, 5, 17, 21, 18, 15, 24, 20, 13], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 5, 17, 21, 18, 15, 24, 20], [3, 5, 17, 21, 18, 15, 24, 20], [3, 5, 17, 21, 18, 15, 24, 20], [3, 5, 17, 21, 18, 15, 24, 20], [3, 5, 17, 21, 18, 15, 24, 20], [3, 5, 17, 21, 18, 15, 24, 20], [], [3, 5, 17, 21, 18, 15, 24, 20], [], [], [3, 5, 17, 21, 18, 15, 24, 20], [], [], [24], [24], [], [], [21, 24], [21, 24], [], [], [17, 24], [17, 24], [], [], [12, 3, 5, 2, 15, 0, 20, 7, 11, 13, 10, 8], [12, 3, 5, 2, 15, 0, 20, 7, 11, 13, 10, 8], [], [], [12, 3, 5, 2, 18, 15, 0, 20, 4, 7, 11, 13, 1, 10, 8], [12, 3, 5, 2, 18, 15, 0, 20, 4, 7, 11, 13, 1, 10, 8], [12, 3, 5, 2, 18, 15, 0, 20, 4, 7, 11, 13, 1, 10, 8], [], [], [20], [20], [20], [20], [], [], [3, 4, 1], [3, 4, 1], [3, 4, 1], [], [], [13, 10], [13, 10], [], [13, 10], [13, 10], [], [], [2, 9, 0, 19, 4, 7, 13, 1, 10], [2, 9, 0, 19, 4, 7, 13, 1, 10], [2, 9, 0, 19, 4, 7, 13, 1, 10], [], []]
