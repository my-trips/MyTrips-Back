buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails.plugins:views-gradle:2.2.1"
        classpath "org.grails.plugins:hibernate5:7.2.2"
        classpath 'com.bmuschko:gradle-clover-plugin:3.0.3'
    }
}

version "0.1"
group "ar.com.mytrips"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.plugins.views-json"
apply plugin: 'com.bmuschko.clover'


repositories {
    maven { url "https://repo.grails.org/grails/core" }
    mavenCentral()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-codecs"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-datasource"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:views-json"
    implementation "org.grails.plugins:views-json-templates"
    implementation "org.grails.plugins:hibernate5"
    implementation "org.hibernate:hibernate-core:5.6.5.Final"
    implementation "org.grails.plugins:events"
    implementation "io.micronaut:micronaut-http-client"
    profile "org.grails.profiles:rest-api"
    runtimeOnly "org.glassfish.web:el-impl:2.2.1-b05"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "org.apache.tomcat:tomcat-jdbc"
    runtimeOnly 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
    implementation "org.grails.plugins:spring-security-rest:3.0.1"
    implementation 'org.grails.plugins:spring-security-core:5.0.0'
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation "io.micronaut:micronaut-http-client"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.grails:views-json-testing-support"
    testImplementation "org.hibernate.validator:hibernate-validator:6.1.7.Final"
    runtimeOnly 'mysql:mysql-connector-java:8.0.29'
    clover 'org.openclover:clover:4.4.1'
}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always', 
        '-noverify', 
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

clover {
    excludes = ['**/Application.groovy',
                '**/BootStrap.groovy',
                '**/UrlMappings.groovy',
                '**/*GrailsPlugin.groovy',
                '**/*Mock.groovy',
    ]

//    targetPercentage = '85%'

    testIncludes = ['**/*Test.groovy']
    report {
        html = true
    }
}

task stage(dependsOn: ['bootJar'])
tasks.stage.doLast() {
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/assetCompile")
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/libs", exclude: "*.jar") //delete everything except jar file inside build folder
}

jar { //Don't package test folders and files
    exclude "test/**"
    exclude "test/**/**"
}
build.mustRunAfter clean //First clean then build to avoid cache issues etc

gradle.taskGraph.whenReady {
    taskGraph ->
        if (taskGraph.hasTask(stage)) { //Don't run test on heroku
            test.enabled = false
        }
}

bootJar { //Exclude test files when pack boot jar file
    enabled = true
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    classifier = 'boot'
    exclude "test/**"
    exclude "test/**/**"
}
